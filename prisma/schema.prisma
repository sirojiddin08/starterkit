generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "core", "public", "settings", "storage"]
}

model permissions {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @unique @db.VarChar(100)
  description      String?
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  role_permissions role_permissions[]

  @@schema("auth")
}

model role_permissions {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role_id       String?      @db.Uuid
  permission_id String?      @db.Uuid
  permissions   permissions? @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  roles         roles?       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([role_id, permission_id])
  @@schema("auth")
}

model roles {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String             @unique @db.VarChar(50)
  description      String?
  created_at       DateTime?          @default(now()) @db.Timestamp(6)
  role_permissions role_permissions[]
  user_roles       user_roles[]

  @@schema("auth")
}

model sessions {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  token      String    @unique
  expires_at DateTime  @db.Timestamp(6)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model user_roles {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id String? @db.Uuid
  role_id String? @db.Uuid
  roles   roles?  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, role_id])
  @@schema("auth")
}

model users {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name    String         @db.VarChar(100)
  last_name     String?        @db.VarChar(100)
  username      String         @unique @db.VarChar(255)
  password_hash String
  is_active     Boolean?       @default(true)
  created_at    DateTime?      @default(now()) @db.Timestamp(6)
  updated_at    DateTime?      @default(now()) @db.Timestamp(6)
  role_id       Int?
  photo         String?        @db.VarChar
  auth_log      auth_log[]
  sessions      sessions[]
  user_roles    user_roles[]
  user_sessions user_sessions?
  logs          logs[]
  orders        orders[]
  files         files[]

  @@schema("auth")
}

model logs {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  action     String
  ip_address String?   @db.VarChar(45)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@schema("core")
}

model settings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  key        String    @unique @db.VarChar(100)
  value      String
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("core")
}

model orders {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  product_id String?   @db.Uuid
  status     String?   @default("pending") @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model products {
  id              Int           @id @default(autoincrement())
  name            String        @db.VarChar(255)
  legacy_name     String?       @db.VarChar(100)
  density         Decimal       @db.Decimal(5, 3)
  melt_index      Decimal       @db.Decimal(5, 2)
  country_id      Int
  organization_id Int
  pdf_file        String?       @db.VarChar(500)
  created_at      DateTime?     @default(now()) @db.Timestamp(6)
  updated_at      DateTime?     @default(now()) @db.Timestamp(6)
  countries       countries     @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_country")
  organizations   organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_organization")

  @@index([country_id], map: "idx_products_country_id")
  @@index([name], map: "idx_products_name")
  @@index([organization_id], map: "idx_products_organization_id")
  @@schema("public")
}

model app_settings {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @unique @db.VarChar(100)
  value      String
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@schema("settings")
}

model files {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String?   @db.Uuid
  file_name  String    @db.VarChar(255)
  file_path  String
  file_type  String?   @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@schema("storage")
}

model user_sessions {
  id              String    @id(map: "user_tokens_pkey") @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String?   @unique(map: "unique_user_id") @db.Uuid
  refresh_token   String?   @db.VarChar(3500)
  expiration_time BigInt?
  unique_id       String?   @db.VarChar
  created_time    DateTime? @default(now()) @db.Timestamp(6)
  users           users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")

  @@schema("auth")
}

model auth_log {
  id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  time    DateTime @default(now()) @db.Timestamp(6)
  user_id String?  @db.Uuid
  ip      String?  @db.VarChar(255)
  users   users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")

  @@schema("auth")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model countries {
  id            Int             @id @default(autoincrement())
  code          String?         @db.VarChar
  name          String          @unique @db.Citext
  continent     String?         @db.VarChar(20)
  currency      String?         @db.VarChar(10)
  phone_code    String?         @db.VarChar(10)
  created_at    DateTime?       @default(now()) @db.Timestamp(6)
  updated_at    DateTime?       @default(now()) @db.Timestamp(6)
  organizations organizations[]
  products      products[]

  @@index([code], map: "idx_countries_code")
  @@index([name], map: "idx_countries_name")
  @@schema("public")
}

model organizations {
  id                  Int        @id @default(autoincrement())
  name                String     @unique @db.VarChar(255)
  country_id          Int
  industry            String?    @db.VarChar(100)
  registration_number String?    @unique @db.VarChar(50)
  created_at          DateTime?  @default(now()) @db.Timestamp(6)
  updated_at          DateTime?  @default(now()) @db.Timestamp(6)
  countries           countries  @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_country")
  products            products[]

  @@index([country_id], map: "idx_organizations_country_id")
  @@index([name], map: "idx_organizations_name")
  @@schema("public")
}
